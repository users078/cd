Min Max :


import math

def findMinMax(score,total_depth,current_depth,node,maxT):
    if(current_depth == total_depth): # Current node is the leaf node
        return score[node];
    if maxT:
        # Going one level deeper to take out max of min values beneath
        return max(findMinMax(score,total_depth,current_depth+1,node*2,False), # Left Child
                   findMinMax(score,total_depth,current_depth+1,node*2 + 1,False)); # Right Child
    else:
        return min(findMinMax(score,total_depth,current_depth+1,node*2,True), # Left Child
                   findMinMax(score,total_depth,current_depth+1,node*2 + 1,True)); # Right Child

score = [];
x = int(input("Enter total leaf nodes")); #Total Leaf Nodes
for i in range(x):
    y = int(input("Enter leaf node value")); #Leaf Nodes Values
    score.append(y);

total_depth = math.log2(len(score)); # Total depth of the binary tree

current_depth = int(input("Enter the depth of the current node")); # Usually 0

node = int(input("Enter node value")); # Enters the value of the node for which we have to find Min or Max Value

maxT = True;
print("The answer is = ");
answer = findMinMax(score,total_depth,current_depth,node,maxT);
print(answer);



DFS and BFS:


from queue import Queue
def dfs(node,adj_list,visited,parent,dfs_traversal_output):
    visited[node] = True; # Marking node as visited
    dfs_traversal_output.append(node);

    for v in adj_list[node]:
        if v not in visited: # if node is not visited then visiting it
            parent[v] = node;
            dfs(v,adj_list,visited,parent,dfs_traversal_output);
    return dfs_traversal_output;

def bfs(s,adj_list):
    visited = {}
    parent = {}
    level = {}
    bfs_traversal_output = []
    queue = Queue()

    visited[s] = True;
    level[s] = 0;
    queue.put(s);
    
    while not queue.empty():
        u = queue.get() # Gets and also dequeues the values inside of the queue
        bfs_traversal_output.append(u);
        for v in adj_list[u]:
            if v not in visited:
                visited[v] = True;
                parent[v] = u;
                level[v] = level[u] + 1;
                queue.put(v);
    return bfs_traversal_output;

adj_list = {
    1:[2,3],
    2:[1,5,6],
    3:[1,4,7],
    4:[3,8],
    5:[2],
    6:[2],
    7:[3,8],
    8:[4,7]
};

s = 1; # Starting Node

# Initializing Variables for the DFS approach
visited = {}
parent = {}
dfs_traversal_output = [];
dfs(s,adj_list,visited,parent,dfs_traversal_output);
print("Traversal Output Using DFS : ");
print(dfs_traversal_output);
print("Traversal Output using BFS : ");
print(bfs(s,adj_list));



Water Jug Problem :


def water_jug_problem(jug1_cap, jug2_cap, target_amount):
    # Initialize the jugs and the possible actions
    j1 = 0
    j2 = 0
    actions = [("fill", 1), ("fill", 2), ("empty", 1), ("empty", 2), ("pour", 1, 2), ("pour", 2, 1)]
    # Create an empty set to store visited states
    visited = set()
    # Create a queue to store states to visit
    queue = [(j1, j2, [])]
    while queue:
        # Dequeue the front state from the queue
        j1, j2, seq = queue.pop(0)
        # If this state has not been visited before, mark it as visited
        if (j1, j2) not in visited:
            visited.add((j1, j2))
            # If this state matches the target amount, return the sequence of actions taken to get to this state
            if j1 == target_amount:
                return seq
            # Generate all possible next states from this state
            for action in actions:
                if action[0] == "fill":
                    if action[1] == 1:
                        next_state = (jug1_cap, j2)
                    else:
                        next_state = (j1, jug2_cap)
                elif action[0] == "empty":
                    if action[1] == 1:
                        next_state = (0, j2)
                    else:
                        next_state = (j1, 0)
                else:
                    if action[1] == 1:
                        amount = min(j1, jug2_cap - j2)
                        next_state = (j1 - amount, j2 + amount)
                    else:
                        amount = min(j2, jug1_cap - j1)
                        next_state = (j1 + amount, j2 - amount)
                # Add the next state to the queue if it has not been visited before
                if next_state not in visited:
                    next_seq = seq + [action]
                    queue.append((next_state[0], next_state[1], next_seq))
    # If the queue becomes empty without finding a solution, return None
    return None

result = water_jug_problem(5, 3, 1)
print(result)



Tic Tac Toe : 




# Set up the game board as a list
board = ["-", "-", "-",
        "-", "-", "-",
        "-", "-", "-"]

# Define a function to print the game board
def print_board():
    print(board[0] + " | " + board[1] + " | " + board[2])
    print(board[3] + " | " + board[4] + " | " + board[5])
    print(board[6] + " | " + board[7] + " | " + board[8])

# Define a function to handle a player's turn
def take_turn(player):
    print(player + "'s turn.")
    position = input("Choose a position from 1-9: ")
    while position not in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
        position = input("Invalid input. Choose a position from 1-9: ")
    position = int(position) - 1
    while board[position] != "-":
        position = int(input("Position already taken. Choose a different position: ")) - 1
    board[position] = player
    print_board()

# Define a function to check if the game is over
def check_game_over():
    # Check for a win
    if (board[0] == board[1] == board[2] != "-") or \
    (board[3] == board[4] == board[5] != "-") or \
    (board[6] == board[7] == board[8] != "-") or \
    (board[0] == board[3] == board[6] != "-") or \
    (board[1] == board[4] == board[7] != "-") or \
    (board[2] == board[5] == board[8] != "-") or \
    (board[0] == board[4] == board[8] != "-") or \
    (board[2] == board[4] == board[6] != "-"):
        return "win"
    # Check for a tie
    elif "-" not in board:
        return "tie"
    # Game is not over
    else:
        return "play"

# Define the main game loop
def play_game():
    print_board()
    current_player = "X"
    game_over = False
    while not game_over:
        take_turn(current_player)
        game_result = check_game_over()
        if game_result == "win":
            print(current_player + " wins!")
            game_over = True
        elif game_result == "tie":
            print("It's a tie!")
            game_over = True
        else:
            # Switch to the other player
            current_player = "O" if current_player == "X" else "X"

# Start the game
play_game();


CRYPTARITHMETIC problem:


from itertools import combinations, permutations
def replacements():
    for comb in combinations(range(10), 8):
        for perm in permutations(comb):
            if perm[0] * perm[1] != 0:
                yield dict(zip('BASELGMS', perm))
a, b, c = 'BASE', 'BALL', 'GAMES'
for replacement in replacements():
    f = lambda x: sum(replacement[e] * 10**i for i, e in enumerate(x[::-1]))
    if f(a) + f(b) == f(c):
        print('{} + {} = {}'.format(f(a), f(b), f(c)))


#BAYESIAN 



import random

def monty_hall_simulation(num_trials):
    switch_wins = 0
    stay_wins = 0

    for _ in range(num_trials):
        doors = ['A', 'B', 'C']
        bike_location = random.choice(doors)
        initial_choice = random.choice(doors)
        doors.remove(initial_choice)

        if bike_location in doors:
            doors.remove(bike_location)
        monty_choice = random.choice(doors)

        doors = [d for d in ['A', 'B', 'C'] if d != monty_choice and d != initial_choice]
        final_choice = doors[0]

        stay_wins += (initial_choice == bike_location)
        switch_wins += (final_choice == bike_location)

    stay_win_prob = stay_wins / num_trials
    switch_win_prob = switch_wins / num_trials

    print(f"Probability of winning by staying: {stay_win_prob:.2f}")
    print(f"Probability of winning by switching: {switch_win_prob:.2f}")

# Number of trials
num_trials = 10

# Run simulation
monty_hall_simulation(num_trials)


# Unification and Resolution


def unify(statement1, statement2):
    # Split statements into words
    words1 = statement1.split()
    words2 = statement2.split()

    # Initialize an empty substitution dictionary
    substitution = {}

    # Iterate over the words in both statements
    for word1, word2 in zip(words1, words2):
        # If a word in statement 2 is a variable, assign its value based on statement 1
        if word2.isalpha() and word2[0].isupper():
            substitution[word2] = word1
        # If words don't match and neither is a variable, unification is not possible
        elif word1 != word2:
            return None

    # Return the substitution dictionary
    return substitution

# Given statements
statement1 = "Moksha and Vineela are sisters"
statement2 = "X and Y are sisters"

# Unify statement 2 with statement 1
result = unify(statement1, statement2)

# Print the result
if result:
    print("The unification is successful. Substitution =", result)
else:
    print("Unification failed.")
    
    
    
    
GRAPH COLORING 


V = 4

def print_solution(color):
    print("Solution Exists: Following are the assigned colors")
    print(" ".join(map(str, color)))

def is_safe(v, graph, color, c):
    # Check if the color 'c' is safe for the vertex 'v'
    for i in range(V):
        if graph[v][i] and c == color[i]:
            return False
    return True

def graph_coloring_util(graph, m, color, v):
    # Base case: If all vertices are assigned a color, return true
    if v == V:
        return True

    # Try different colors for the current vertex 'v'
    for c in range(1, m + 1):
        # Check if assignment of color 'c' to 'v' is fine
        if is_safe(v, graph, color, c):
            color[v] = c

            # Recur to assign colors to the rest of the vertices
            if graph_coloring_util(graph, m, color, v + 1):
                return True

            # If assigning color 'c' doesn't lead to a solution, remove it
            color[v] = 0

    # If no color can be assigned to this vertex, return false
    return False

def graph_coloring(graph, m):
    color = [0] * V

    # Call graph_coloring_util() for vertex 0
    if not graph_coloring_util(graph, m, color, 0):
        print("Solution does not exist")
        return False

    print_solution(color)
    return True

# Driver code
if __name__ == "__main__":
    graph = [
        [0, 1, 1, 1],
        [1, 0, 1, 0],
        [1, 1, 0, 1],
        [1, 0, 1, 0],
    ]

    m = 3
    graph_coloring(graph, m)


A Star Algorithm


#include <stdio.h>  
#include <stdlib.h>  
  
#define ROWS 5  
#define COLS 5  
  
// Define a structure for a grid cell  
typedef struct {  
    int row, col;  
} Cell;  
  
// Define a structure for a node in the A* algorithm  
typedef struct {  
    Cell position;  
    int g, h, f;  
    struct Node* parent;  
} Node;  
  
// Function to calculate the Manhattan distance between two cells  
int heuristic(Cell current, Cell goal) {  
    return abs(current.row - goal.row) + abs(current.col - goal.col);  
}  
  
// Function to check if a cell is valid (within the grid and not an obstacle)  
int isValid(int row, int col, int grid[ROWS][COLS]) {  
    return (row >= 0) && (row < ROWS) && (col >= 0) && (col < COLS) && (grid[row][col] == 0);  
}  
  
// Function to check if a cell is the goal cell  
int isGoal(Cell cell, Cell goal) {  
    return (cell.row == goal.row) && (cell.col == goal.col);  
}  
  
// Function to perform the A* search algorithm  
void AStarSearch(int grid[ROWS][COLS], Cell start, Cell goal) {  
    // TODO: Implement the A* search algorithm here  
}  
  
int main() {  
    int grid[ROWS][COLS] = {  
        {0, 1, 0, 0, 0},  
        {0, 1, 0, 1, 0},  
        {0, 0, 0, 1, 0},  
        {0, 1, 0, 0, 0},  
        {0, 0, 0, 0, 0}  
    };  
      
    Cell start = {0, 0};  
    Cell goal = {ROWS - 1, COLS - 1};  
      
    AStarSearch (grid, start, goal);  
  
    return 0;  
}  
